import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from datetime import datetime

API_TOKEN = '8103578297:AAEza3YSbol4ctPJnQnLOcIgwWgrabBJ2lU'
ADMIN_ID = 7377185899
ADMIN_PASSWORD = "TASLIMAlupa"
CHANNEL_USERNAME = 'always_viral'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_data = {
    'links': [],
    'videos': [],
    'users': set(),
    'admins': set()
}

def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="/admin"),
        KeyboardButton(text="/videos")
    )
    builder.row(
        KeyboardButton(text="/shere"),
        KeyboardButton(text="/viral_links")
    )
    builder.row(
        KeyboardButton(text="/acount"),
        KeyboardButton(text="/help")
    )
    return builder.as_markup(resize_keyboard=True)

async def is_user_joined_channel(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=user_id)
        return member.status not in ('left', 'kicked')
    except Exception:
        return False

@dp.message(Command(commands=['start']))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    user_data['users'].add(user_id)

    joined = await is_user_joined_channel(user_id)

    if not joined:
        join_btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ Join Channel", url=f"https://t.me/{CHANNEL_USERNAME}")],
            [InlineKeyboardButton(text="‚úÖ Join ‡¶ï‡¶∞‡ßá ‡¶è‡¶∏‡ßá‡¶õ‡¶ø", callback_data="recheck_join")]
        ])
        await message.answer(
            f"""‡¶™‡ßç‡¶∞‡¶ø‡ßü user: {full_name}

in bangla : ‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ ‚ù§Ô∏è‚Äçü©π
in english : Peace be upon you. ‚ù§Ô∏è‚Äçü©π
in arabic : ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ. ‚ù§Ô∏è‚Äçü©π

‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶ü‡¶ü‡¶ø use ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‚ù§Ô∏è‚ù§Ô∏è
‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßá‡¶§‡ßá ‡¶π‡¶≤‡ßá, ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ü‡¶ø ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ü•∞""",
            reply_markup=join_btn
        )
    else:
        await message.answer(f"‡¶Ü‡¶™‡¶®‡¶ø ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ü‡¶ø ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®, ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ {full_name}!", reply_markup=main_menu())

@dp.callback_query(lambda c: c.data == "recheck_join")
async def handle_join_check(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    joined = await is_user_joined_channel(user_id)
    if joined:
        await callback_query.message.answer("‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®!", reply_markup=main_menu())
    else:
        await callback_query.message.answer("‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ Join ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø!")

@dp.message(lambda m: m.text == "/admin")
async def admin_entry(message: types.Message):
    if message.from_user.id in user_data['admins'] or message.from_user.id == ADMIN_ID:
        return await show_admin_panel(message)
    await message.answer("‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶®:")

@dp.message(lambda m: m.text == ADMIN_PASSWORD)
async def admin_login(message: types.Message):
    user_data['admins'].add(message.from_user.id)
    await message.answer("‚úÖ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá")
    await show_admin_panel(message)

async def show_admin_panel(message: types.Message):
    buttons = [
        [KeyboardButton("/userlist"), KeyboardButton("/add_link")],
        [KeyboardButton("/add_video"), KeyboardButton("/stats")],
        [KeyboardButton("/back")]
    ]
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("Admin Panel", reply_markup=markup)

@dp.message(lambda m: m.text == "/videos")
async def video_panel(message: types.Message):
    buttons = [
        [KeyboardButton("/‡¶¶‡ßá‡¶∂‡¶ø_‡¶≠‡¶ø‡¶°‡¶ø‡¶ì"), KeyboardButton("/‡¶ú‡¶æ‡¶™‡¶æ‡¶®‡¶ø‡¶ú")],
        [KeyboardButton("/‡¶Ü‡¶Æ‡ßá‡¶∞‡¶ø‡¶ï‡¶æ‡¶®"), KeyboardButton("/‡¶≤‡ßá‡¶∏‡¶¨‡¶ø‡ßü‡¶æ‡¶®")],
        [KeyboardButton("/‡¶®‡¶§‡ßÅ‡¶®"), KeyboardButton("/back")]
    ]
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®: üé•", reply_markup=markup)

@dp.message(lambda m: m.text == "/shere")
async def share_bot(message: types.Message):
    user_id = message.from_user.id
    refer_link = f"https://t.me/always_viral_bot?start={user_id}"

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("/‡¶®‡¶§‡ßÅ‡¶®_‡¶≠‡¶æ‡¶á‡¶∞‡¶æ‡¶≤_‡¶≤‡¶ø‡¶Ç‡¶ï"),
        KeyboardButton("/‡¶ü‡¶ø‡¶ï‡¶ü‡¶ï‡¶æ‡¶∞_‡¶è‡¶∞_‡¶≤‡¶ø‡¶Ç‡¶ï"),
        KeyboardButton("/‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç_‡¶≤‡¶ø‡¶Ç‡¶ï"),
        KeyboardButton("/back")
    )

    await message.answer(
        f"""‡¶è‡¶á ‡¶®‡¶ø‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï üëá
{refer_link}
‡¶è‡¶¨‡¶Ç ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‚ù§Ô∏èü•∞

/back ‡¶¶‡¶ø‡ßü‡ßá ‡¶Æ‡ßá‡¶á‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®‡•§""",
        reply_markup=keyboard
    )

@dp.message(lambda m: m.text == "/viral_links")
async def viral_links_cmd(message: types.Message):
    buttons = [
        [KeyboardButton("/‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç_‡¶≤‡¶ø‡¶Ç‡¶ï"), KeyboardButton("/‡¶ü‡¶ø‡¶ï‡¶ü‡¶ï‡¶æ‡¶∞_‡¶è‡¶∞_‡¶≤‡¶ø‡¶Ç‡¶ï")],
        [KeyboardButton("/‡¶®‡¶§‡ßÅ‡¶®_‡¶≠‡¶æ‡¶á‡¶∞‡¶æ‡¶≤_‡¶≤‡¶ø‡¶Ç‡¶ï"), KeyboardButton("/back")]
    ]
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("‡¶≠‡¶æ‡¶á‡¶∞‡¶æ‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®:", reply_markup=markup)

@dp.message(lambda m: m.text == "/acount")
async def account_info(message: types.Message):
    username = message.from_user.username or "‡¶®‡¶æ‡¶á"
    await message.answer(f"""‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡¶•‡ßç‡¶Ø:
‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ: @{username}
‡¶Ü‡¶á‡¶°‡¶ø: {message.from_user.id}
‡¶®‡¶æ‡¶Æ: {message.from_user.full_name}
""")

@dp.message(lambda m: m.text == "/help")
async def help_cmd(message: types.Message):
    await message.answer("‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®: @toxic_digonto")

@dp.message(lambda m: m.text == "/back")
async def back_to_main(message: types.Message):
    await message.answer("‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Æ‡ßá‡¶á‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ‡¶§‡ßá ‡¶Ü‡¶õ‡ßá‡¶®:", reply_markup=main_menu())

@dp.message(lambda m: m.text == "/userlist")
async def user_list(message: types.Message):
    if message.from_user.id not in user_data['admins'] and message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ!")
    total_users = len(user_data['users'])
    await message.answer(f"‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ: {total_users}")

@dp.message(lambda m: m.text == "/add_link")
async def add_link(message: types.Message):
    await message.answer("‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®:")

@dp.message(lambda m: m.text == "/add_video")
async def add_video(message: types.Message):
    await message.answer("‡¶®‡¶§‡ßÅ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶®:")

@dp.message(lambda m: m.text == "/stats")
async def show_stats(message: types.Message):
    total_users = len(user_data['users'])
    total_links = len(user_data['links'])
    total_videos = len(user_data['videos'])
    await message.answer(f"Stats:
Users: {total_users}
Links: {total_links}
Videos: {total_videos}")

@dp.message(lambda message: message.text and message.text.startswith("http"))
async def handle_new_link_or_video(message: types.Message):
    if message.from_user.id not in user_data['admins'] and message.from_user.id != ADMIN_ID:
        return
    text = message.text.strip()
    if any(ext in text.lower() for ext in ['.mp4', '.mkv', '.mov', '.avi']):
        user_data['videos'].append(text)
        await message.answer(f"‡¶®‡¶§‡ßÅ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì {text} ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá")
    else:
        user_data['links'].append(text)
        await message.answer(f"‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶Ç‡¶ï {text} ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
